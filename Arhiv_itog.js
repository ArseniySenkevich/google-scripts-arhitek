/**********************************************************************
* Telegram Bot ‚Äî –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –í—ã–≥—Ä—É–∑–∫–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
**********************************************************************/

const SHEETS_TO_ARCHIVE = {
  '–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞': '–ê—Ä—Ö–∏–≤_–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞',
  '–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã': '–ê—Ä—Ö–∏–≤_–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã',
  '–°–≤–æ–¥ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º': '–ê—Ä—Ö–∏–≤_–°–≤–æ–¥ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
  '–í–æ–∑–≤—Ä–∞—Ç—ã –ª–∏–¥–æ–≤': '–ê—Ä—Ö–∏–≤_–í–æ–∑–≤—Ä–∞—Ç—ã –ª–∏–¥–æ–≤'
};

const ARCHIVE_ACCESS = {
  420111780: '–°–µ–Ω–∫–µ–≤–∏—á –ê—Ä—Å–µ–Ω–∏–π',
  987654322: '–û—Ä—Ñ–∞–Ω–∏–¥–∏ –ê.'
};

function hasArchiveAccess(userId) {
  return userId in ARCHIVE_ACCESS;
}

function getTodayISO() {
  return Utilities.formatDate(new Date(), 'GMT+3', 'yyyy-MM-dd');
}

// ‚Äî‚Äî‚Äî –ö–Ω–æ–ø–∫–∞ –ê—Ä—Ö–∏–≤–∞—Ü–∏–∏ ‚Äî‚Äî‚Äî
function handleArchiveRequest(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'CONFIRM_ARCHIVE' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'CANCEL_ARCHIVE' }
      ]
    ]
  };

  sendMessage(chatId,
    '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?\n\n' +
    '–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n‚Äî –ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤:\n' +
    Object.keys(SHEETS_TO_ARCHIVE).map(n => 'üìå ' + n).join('\n') +
    '\n–≤ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ª–∏—Å—Ç—ã —Å –¥–∞—Ç–æ–π (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è).\n‚Äî –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤.\n‚Äî –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞.',
    keyboard
  );
}

// ‚Äî‚Äî‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ê—Ä—Ö–∏–≤–∞—Ü–∏–∏ ‚Äî‚Äî‚Äî
function handleArchiveConfirm(chatId) {
  archiveAndReport();
  const link = createExcelWithTodayArchives();
  sendMessage(chatId, `‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\nüìÅ <a href="${link}">–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç</a>`, null);
}

// ‚Äî‚Äî‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—á—å—é ‚Äî‚Äî‚Äî
function nightlyArchiveRun() {
  archiveAndReport();
}

// ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–æ–π –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é ‚Äî‚Äî‚Äî
function archiveAndReport() {
  const dateStr = getTodayISO();
  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

  Object.entries(SHEETS_TO_ARCHIVE).forEach(([sourceName, archiveName]) => {
    const sheet = ss.getSheetByName(sourceName);
    if (!sheet) return;

    const data = sheet.getDataRange().getValues();
    if (data.length < 2) return;

    let archiveSheet = ss.getSheetByName(archiveName);
    if (!archiveSheet) archiveSheet = ss.insertSheet(archiveName);

    const archiveData = archiveSheet.getDataRange().getValues();
    const reportLabel = `–û—Ç—á—ë—Ç –æ—Ç ${dateStr}`;

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ —Å —ç—Ç–æ–π –¥–∞—Ç–æ–π
    let startRow = -1;
    for (let i = 0; i < archiveData.length; i++) {
      if (archiveData[i][0] === reportLabel) {
        startRow = i;
        break;
      }
    }

    if (startRow !== -1) {
      // –ù–∞–π–¥—ë–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞
      let endRow = archiveData.length;
      for (let i = startRow + 1; i < archiveData.length; i++) {
        if (String(archiveData[i][0]).startsWith('–û—Ç—á—ë—Ç –æ—Ç')) {
          endRow = i;
          break;
        }
      }
      const numRows = endRow - startRow;
      archiveSheet.deleteRows(startRow + 1, numRows); // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ index 0-based
    }

    // –í—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    const insertRow = archiveSheet.getLastRow() + 2;
    archiveSheet.getRange(insertRow, 1).setValue(reportLabel);
    archiveSheet.getRange(insertRow + 1, 1, data.length, data[0].length).setValues(data);

    archiveSheet.getRange(insertRow + 1, 1, data.length, 1).shiftRowGroupDepth(1);
    archiveSheet.getRowGroup(insertRow + 1, 1).collapse();

    // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤ (–∫—Ä–æ–º–µ —à–∞–ø–∫–∏)
    sheet.deleteRows(2, sheet.getLastRow() - 1);
  });

  SpreadsheetApp.flush();
}

// ‚Äî‚Äî‚Äî –í—ã–≥—Ä—É–∑–∫–∞ Excel –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî‚Äî‚Äî
function createExcelWithTodayArchives() {
  return createExcelWithDate(getTodayISO());
}

// ‚Äî‚Äî‚Äî –í—ã–≥—Ä—É–∑–∫–∞ Excel –∑–∞ –ª—é–±—É—é –¥–∞—Ç—É ‚Äî‚Äî‚Äî
function createExcelWithDate(dateStr) {
  const source = SpreadsheetApp.openById(SPREADSHEET_ID);
  const temp = SpreadsheetApp.create(`–ê—Ä—Ö–∏–≤—ã –∑–∞ ${dateStr}`);

  Object.values(SHEETS_TO_ARCHIVE).forEach(archiveName => {
    const sheet = source.getSheetByName(archiveName);
    if (!sheet) return;

    const data = sheet.getDataRange().getValues();
    let startIndex = -1;

    for (let i = 0; i < data.length; i++) {
      if (data[i][0] === `–û—Ç—á—ë—Ç –æ—Ç ${dateStr}`) {
        startIndex = i + 1;
        break;
      }
    }

    if (startIndex === -1) return;

    const values = [];
    for (let i = startIndex; i < data.length; i++) {
      if (String(data[i][0]).startsWith('–û—Ç—á—ë—Ç –æ—Ç')) break;
      values.push(data[i]);
    }

    if (values.length > 0) {
      const tempSheet = temp.insertSheet(archiveName.replace('–ê—Ä—Ö–∏–≤_', ''));
      tempSheet.getRange(1, 1, values.length, values[0].length).setValues(values);
    }
  });

  const defaultSheet = temp.getSheetByName('–õ–∏—Å—Ç1');
  if (defaultSheet) temp.deleteSheet(defaultSheet);

  const blob = temp.getBlob().getAs('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  const file = DriveApp.createFile(blob).setName(`–ê—Ä—Ö–∏–≤—ã –∑–∞ ${dateStr}.xlsx`);
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);

  return file.getUrl();
}

function handleReportRequest(chatId, userId, userText) {

  const props = PropertiesService.getScriptProperties();

  // üõ° –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã Telegram
  if (userText.startsWith('/')) return false;
  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É
  if (props.getProperty('awaiting_report_date_' + userId) === 'true') {
    props.deleteProperty('awaiting_report_date_' + userId);
    const match = userText.trim().match(/^(\d{1,2})[.\-\/](\d{1,2})[.\-\/](\d{4})$/);
    if (!match) {
      sendMessage(chatId, '‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 09.07.2025');
      return true;
    }

    const [ , dd, mm, yyyy ] = match;
    const isoDate = `${yyyy}-${String(mm).padStart(2, '0')}-${String(dd).padStart(2, '0')}`;

    try {
      const link = createExcelWithDate(isoDate);
      sendMessage(chatId, `‚úÖ –û—Ç—á—ë—Ç –∑–∞ ${dd}.${mm}.${yyyy} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\nüìÅ <a href="${link}">–°–∫–∞—á–∞—Ç—å Excel</a>`);
    } catch (e) {
      sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—á—ë—Ç –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    return true;
  }

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –≤—ã–≥—Ä—É–∑–∫—É
  if (userText.toLowerCase().includes('–≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞')) {
    if (!hasArchiveAccess(userId)) {
      sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–æ–≤.');
      return true;
    }
    props.setProperty('awaiting_report_date_' + userId, 'true');
    sendMessage(chatId, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥–≥–≥</b> –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞:');
    return true;
  }

  return false;
}


