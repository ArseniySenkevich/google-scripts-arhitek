/**********************************************************************
* Telegram Bot ‚Äî –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –í—ã–≥—Ä—É–∑–∫–∞ (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã)
**********************************************************************/

const SHEETS_TO_ARCHIVE = {
  '–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞': '–ê—Ä—Ö–∏–≤_–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞',
  '–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã': '–ê—Ä—Ö–∏–≤_–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã',
  '–°–≤–æ–¥ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º': '–ê—Ä—Ö–∏–≤_–°–≤–æ–¥ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
  '–í–æ–∑–≤—Ä–∞—Ç—ã –ª–∏–¥–æ–≤': '–ê—Ä—Ö–∏–≤_–í–æ–∑–≤—Ä–∞—Ç—ã –ª–∏–¥–æ–≤'
};

const ARCHIVE_ACCESS = {
  420111780: '–°–µ–Ω–∫–µ–≤–∏—á –ê—Ä—Å–µ–Ω–∏–π',
  987654322: '–û—Ä—Ñ–∞–Ω–∏–¥–∏ –ê.'
};

function hasArchiveAccess(userId) {
  return userId in ARCHIVE_ACCESS;
}

function getTodayISO() {
  return Utilities.formatDate(new Date(), 'GMT+3', 'yyyy-MM-dd');
}

function getTodayRU() {
  return Utilities.formatDate(new Date(), 'GMT+3', 'dd.MM.yyyy');
}

function getNow() {
  return Utilities.formatDate(new Date(), 'GMT+3', 'yyyy-MM-dd HH:mm:ss');
}

function handleArchiveCallback(action, chatId, userId) {
  if (!hasArchiveAccess(userId)) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é.');
    return;
  }

  const clear = action === 'ARCHIVE_AND_CLEAR';
  try {
    archiveAndReport(clear);  // —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –æ—á–∏—â–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
    const link = createExcelWithTodayArchives();
    const text = clear
      ? `‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—á–∏—Å—Ç–∫–æ–π.\nüìÅ <a href="${link}">–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç</a>`
      : `‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –æ—á–∏—Å—Ç–∫–∏).\nüìÅ <a href="${link}">–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç</a>`;
    sendMessage(chatId, text);
  } catch (e) {
    const logSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('–õ–æ–≥–û—à–∏–±–æ–∫');
    if (logSheet) {
      logSheet.appendRow([getNow(), 'handleArchiveCallback', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏/–≤—ã–≥—Ä—É–∑–∫–µ: ${e.message}`, userId]);
    }
    sendMessage(chatId, `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${e.message}`);
  }
}




function archiveAndReport(clearSource = true) {
  const dateRu = getTodayRU();
  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
  const logSheet = ss.getSheetByName('–õ–æ–≥–û—à–∏–±–æ–∫');

  Object.entries(SHEETS_TO_ARCHIVE).forEach(([srcName, arcName]) => {
    try {
      const srcSheet = ss.getSheetByName(srcName);
      if (!srcSheet) return;

      const data = srcSheet.getDataRange().getValues();
      if (data.length < 2) return;

      let arcSheet = ss.getSheetByName(arcName);
      if (!arcSheet) arcSheet = ss.insertSheet(arcName);

      const label = `–û—Ç—á—ë—Ç –æ—Ç ${dateRu}`;
      const archiveData = arcSheet.getDataRange().getValues();
      const existingLabelRow = archiveData.findIndex(row => String(row[0]).trim() === label);

      if (clearSource) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –∞—Ä—Ö–∏–≤–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (existingLabelRow >= 0) {
          let endRow = existingLabelRow + 1;
          while (endRow < archiveData.length && !String(archiveData[endRow][0]).startsWith('–û—Ç—á—ë—Ç –æ—Ç')) {
            endRow++;
          }
          arcSheet.deleteRows(existingLabelRow + 1, endRow - existingLabelRow - 1);
          arcSheet.deleteRow(existingLabelRow + 1); // —Å–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
          SpreadsheetApp.flush();
        }
      } else {
        // –¢–æ–ª—å–∫–æ –≤—ã–≥—Ä—É–∑–∫–∞: –µ—Å–ª–∏ —É–∂–µ –≤—ã–≥—Ä—É–∂–∞–ª–∏, —Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        if (existingLabelRow >= 0) {
          logSheet?.appendRow([getNow(), arcName, `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—á—ë—Ç –∑–∞ ${dateRu} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, Session.getActiveUser().getEmail()]);
          return;
        }
      }

      const insertRow = arcSheet.getLastRow() + 2;
      arcSheet.getRange(insertRow, 1).setValue(label);
      arcSheet.getRange(insertRow + 1, 1, data.length, data[0].length).setValues(data);

      try {
        const range = arcSheet.getRange(insertRow + 1, 1, data.length);
        range.shiftRowGroupDepth(1);
        arcSheet.getRowGroup(insertRow + 1, 1)?.collapse();
      } catch (e) {
        logSheet?.appendRow([getNow(), arcName, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ: ${e.message}`, Session.getActiveUser().getEmail()]);
      }

      // –û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã, –µ—Å–ª–∏ clearSource = true
      if (clearSource && srcSheet.getLastRow() > 1) {
        const numCols = srcSheet.getLastColumn();
        srcSheet.getRange(2, 1, srcSheet.getLastRow() - 1, numCols).clearContent();
      }

    } catch (e) {
      logSheet?.appendRow([getNow(), arcName, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: ${e.message}`, Session.getActiveUser().getEmail()]);
    }
  });

  SpreadsheetApp.flush();
}



function createExcelWithTodayArchives() {
  return createExcelWithDate(getTodayRU());
}

function createExcelWithDate(dateStr) {
  Logger.log(`‚ñ∂Ô∏è createExcelWithDate() —Å –¥–∞—Ç–æ–π: ${dateStr}`);
  const source = SpreadsheetApp.openById(SPREADSHEET_ID);
  const temp = SpreadsheetApp.create(`–ê—Ä—Ö–∏–≤—ã –∑–∞ ${dateStr}`);
  const log = source.getSheetByName('–õ–æ–≥–û—à–∏–±–æ–∫');
  const isoDate = dateStr.replace(/(\d{2})\.(\d{2})\.(\d{4})/, '$3-$2-$1');
  let sheetCount = 0;

  Object.values(SHEETS_TO_ARCHIVE).forEach(name => {
    const sh = source.getSheetByName(name);
    Logger.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç ${name}...`);
    if (!sh) {
      if (log) log.appendRow([getNow(), name, '‚ö†Ô∏è –õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', Session.getActiveUser().getEmail()]);
      return;
    }
    const values = sh.getDataRange().getValues();
    const headerLine = values.findIndex(r => {
      const c = String(r[0]).trim();
      return c === `–û—Ç—á—ë—Ç –æ—Ç ${dateStr}` || c === `–û—Ç—á—ë—Ç –æ—Ç ${isoDate}`;
    });
    if (headerLine < 0) {
      if (log) log.appendRow([getNow(), name, '‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', Session.getActiveUser().getEmail()]);
      return;
    }
    const rows = values.slice(headerLine + 1).filter(r => {
      const c = String(r[0]).trim();
      return c && !c.startsWith('–û—Ç—á—ë—Ç –æ—Ç');
    });
    Logger.log(`${name}: rows=${rows.length}`);
    if (!rows.length) {
      if (log) log.appendRow([getNow(), name, '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', Session.getActiveUser().getEmail()]);
      return;
    }
    const tmp = temp.insertSheet(name.replace('–ê—Ä—Ö–∏–≤_', ''));
    tmp.getRange(1, 1, rows.length, rows[0].length).setValues(rows);
    sheetCount++;
  });

  if (sheetCount === 0) {
    if (log) log.appendRow([getNow(), '-', `‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∑–∞ ${dateStr}`, Session.getActiveUser().getEmail()]);
    throw new Error('–ê—Ä—Ö–∏–≤ –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç—Å—è
  temp.getSheets().forEach(s => {
    if (s.getName() === '–õ–∏—Å—Ç1' || s.getName() === 'Sheet1') temp.deleteSheet(s);
  });

  // üÜï –†–ù: —ç–∫—Å–ø–æ—Ä—Ç–∏–º –∫–Ω–∏–≥—É —Ü–µ–ª–∏–∫–æ–º —á–µ—Ä–µ–∑ UrlFetch
  const exportUrl = `https://docs.google.com/spreadsheets/d/${temp.getId()}/export?format=xlsx`;
  const blob = UrlFetchApp.fetch(exportUrl, {
    headers: { Authorization: 'Bearer ' + ScriptApp.getOAuthToken() }
  }).getBlob().setName(`–ê—Ä—Ö–∏–≤—ã –∑–∞ ${dateStr}.xlsx`);
  const file = DriveApp.createFile(blob);
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  return file.getUrl();
}



function handleReportRequest(chatId, userId, userText) {
  const props = PropertiesService.getScriptProperties();
  if (userText.startsWith('/')) return false;

  if (props.getProperty('awaiting_report_date_' + userId) === 'true') {
    props.deleteProperty('awaiting_report_date_' + userId);
    const match = userText.trim().match(/^(\d{1,2})[.\-/](\d{1,2})[.\-/](\d{4})$/);
    if (!match) {
      sendMessage(chatId, '‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 09.07.2025');
      return true;
    }

    const [ , dd, mm, yyyy ] = match;
    const ruDate = `${String(dd).padStart(2, '0')}.${String(mm).padStart(2, '0')}.${yyyy}`;

    try {
      const link = createExcelWithDate(ruDate);
      sendMessage(chatId, `‚úÖ –û—Ç—á—ë—Ç –∑–∞ ${dd}.${mm}.${yyyy} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\nüìÅ <a href="${link}">–°–∫–∞—á–∞—Ç—å Excel</a>`);
    } catch (e) {
      const logSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('–õ–æ–≥–û—à–∏–±–æ–∫');
      if (logSheet) {
        logSheet.appendRow([getNow(), 'handleReportRequest', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}`, userId]);
      }
      sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—á—ë—Ç –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    return true;
  }

  if (userText.toLowerCase().includes('–≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞')) {
    if (!hasArchiveAccess(userId)) {
      sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–æ–≤.');
      return true;
    }
    props.setProperty('awaiting_report_date_' + userId, 'true');
    sendMessage(chatId, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥–≥–≥</b> –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞:');
    return true;
  }

  return false;
}
