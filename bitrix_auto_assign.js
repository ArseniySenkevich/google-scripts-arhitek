const WEBHOOK_URL = 'https://arkhitek.bitrix24.ru/rest/29613/d4q1d0bb0oitzo21/'; // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

const TARGET_STATUS_ID = '8'; // —Å—Ç–∞–¥–∏—è "–ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"

function getBitrixIdByManagerName(name) {
  const sheet = SpreadsheetApp.getActive().getSheetByName('–û—á–µ—Ä–µ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (data[i][1] && data[i][1].trim() === name.trim()) {
      return data[i][0];
    }
  }
  return null;
}

function logError(message) {
  const sheet = SpreadsheetApp.getActive().getSheetByName('–õ–æ–≥–û—à–∏–±–æ–∫');
  sheet.appendRow([new Date(), message]);
}

function assignResponsibleInBitrix(leadId, managerBitrixId) {
  const payload = {
    id: leadId,
    fields: { ASSIGNED_BY_ID: managerBitrixId }
  };
  const res = callBitrixMethod('crm.lead.update', payload);
  if (res.error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ' + res.error_description);
    return false;
  }
  return true;
}

function moveLeadToConversionStage(leadId) {
  const payload = {
    id: leadId,
    fields: {
      STATUS_ID: TARGET_STATUS_ID
    }
  };

  const res = callBitrixMethod('crm.lead.update', payload);
  if (res.error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ª–∏–¥–∞ –Ω–∞ —Å—Ç–∞–¥–∏—é 8: ' + res.error_description);
    return false;
  }

  Logger.log(`‚úÖ –õ–∏–¥ ${leadId} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞–¥–∏—é 8`);
  return true;
}

function autoAssignManagerToBitrix(leadId, managerName) {
  const managerId = getBitrixIdByManagerName(managerName);
  if (!managerId) {
    logError('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Bitrix ID –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ' + managerName);
    return;
  }

  logError(`‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º ${managerName} (${managerId}) –Ω–∞ –ª–∏–¥ ${leadId}`);

  if (!assignResponsibleInBitrix(leadId, managerId)) return;
  Utilities.sleep(2000);

  if (!moveLeadToConversionStage(leadId)) {
    logError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª–∏–¥ –Ω–∞ —Å—Ç–∞–¥–∏—é 8. ID –ª–∏–¥–∞: ' + leadId);
    return;
  }

  logError('‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ–ª–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ä–æ–±–æ—Ç–∞...');
  Utilities.sleep(2000);

  const dealId = findDealByLeadContact(leadId);

  if (dealId) {
    logError(`‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${dealId}`);
    writeLeadAndDealLinksToSheet(leadId, dealId);
  } else {
    logError(`‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ª–∏–¥—É ${leadId}`);
  }
}

function findDealByLeadContact(leadId) {
  const leadResp = callBitrixMethod('crm.lead.get', { id: leadId });
  if (!leadResp.result || !leadResp.result.CONTACT_ID) {
    logError(`‚ùå –ù–µ—Ç CONTACT_ID —É –ª–∏–¥–∞ ${leadId}: ${JSON.stringify(leadResp)}`);
    return null;
  }

  const contactId = leadResp.result.CONTACT_ID;
  logError(`üîç –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É ${contactId}`);

  const dealsResp = callBitrixMethod('crm.deal.list', {
    filter: { CONTACT_ID: contactId },
    select: ['ID', 'DATE_CREATE'],
    order: { DATE_CREATE: 'DESC' }
  });

  const deals = dealsResp.result || [];
  logError(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${deals.length}`);
  return deals.length > 0 ? deals[0].ID : null;
}


function writeLeadAndDealLinksToSheet(leadId, dealId) {
  const sheet = SpreadsheetApp.getActive().getSheetByName('–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞');
  const data = sheet.getDataRange().getValues();

  const leadUrl = `https://arkhitek.bitrix24.ru/crm/lead/details/${leadId}/`;
  const dealUrl = `https://arkhitek.bitrix24.ru/crm/deal/details/${dealId}/`;

  for (let i = 1; i < data.length; i++) {
    const row = data[i];

    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ H (index 7) –ø—É—Å—Ç–∞—è –∏ –∫–æ–ª–æ–Ω–∫–∞ I (index 8) —Ç–æ–∂–µ –ø—É—Å—Ç–∞—è ‚Äî —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–≤–æ–±–æ–¥–Ω–æ–π
    if (!row[7] && !row[8]) {
      sheet.getRange(i + 1, 8).setValue(leadUrl); // H (8) –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥
      sheet.getRange(i + 1, 9).setValue(dealUrl); // I (9) –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
      Logger.log(`‚úÖ –°—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É ${i + 1}`);
      return;
    }
  }

  logError(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–∏–¥–∞ ${leadId}`);
}


function callBitrixMethod(method, payload) {
  const url = `${WEBHOOK_URL}${method}.json`;

  try {
    const response = UrlFetchApp.fetch(url, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload)
    });
    return JSON.parse(response.getContentText());
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Bitrix API: ' + error.toString());
    return { error: true, error_description: error.toString() };
  }
}
function findOriginalManagerByLeadId(leadId) {
  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheetsToSearch = ["–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞", "–ê—Ä—Ö–∏–≤_–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞"];

  for (let sheetName of sheetsToSearch) {
    const sheet = ss.getSheetByName(sheetName);
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      const link = data[i][7] || ''; // –∫–æ–ª–æ–Ω–∫–∞ H ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥
      if (link.includes(`/${leadId}/`)) {
        const managerName = data[i][4]; // –∫–æ–ª–æ–Ω–∫–∞ E ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞
        if (managerName) return managerName.trim();
      }
    }
  }

  return null;
}

