const BOT_TOKEN = '7306430416:AAFftRJ7mZt4ukobJtvutPvlUN6c422DsdU';
const SPREADSHEET_ID = '1gnIHCS_MY3w-rV_GtgJ_izDdYQ0prZV8fy3HroGESho';
const SHEET_NAME = '–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã';
const SHEET_ASSIGN = '–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞';
const SHEET_ERRORS = '–õ–æ–≥–û—à–∏–±–æ–∫';
const RETURN_STEP_PROPERTY = 'return_lead_step';


const ALLOWED_USERS = {
  123456789: '–ò–≤–∞–Ω—ã–∫ –ù.',
  987654321: '–ú–æ–∑–≥–æ–≤–æ–π –õ.',
  420111780: '–°–µ–Ω–∫–µ–≤–∏—á –ê—Ä—Å–µ–Ω–∏–π',
  987654322: '–û—Ä—Ñ–∞–Ω–∏–¥–∏ –ê.',
  7265770045: '–ö–∏—Ä–∏—á–∏–∫ –Æ.',
};

const MANAGERS_ALLOWED_TO_RETURN = [
  123456789, // –ò–≤–∞–Ω—ã–∫ –ù.
  987654321, // –ú–æ–∑–≥–æ–≤–æ–π –õ.
  987654322, // –û—Ä—Ñ–∞–Ω–∏–¥–∏ –ê.
  420111780, //–ê—Ä—Å–µ–Ω–∏–π –°.
];

const RESTRICTED_USERS = {
  7265770045: '–ö–∏—Ä–∏—á–∏–∫ –Æ.',
  998877665: '–î—Ä—É–≥–æ–π –ú–µ–Ω–µ–¥–∂–µ—Ä'
};


const REGION_MAP = (() => {
  const list = ["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ê–Ω–∞–ø–∞", "–¢—É–∞–ø—Å–µ", "–ì–µ–ª–µ–Ω–¥–∂–∏–∫", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "–ø–æ–±–µ—Ä–µ–∂—å–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è", "–°–æ—á–∏", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞", "–†–æ—Å—Ç–æ–≤ –∏ –†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π (–¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞)", "–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö—Ä—ã–º", "–ö—É—Ä—Å–∫", "–ë–µ–ª–≥–æ—Ä–æ–¥", "–õ–∏–ø–µ—Ü–∫", "–ö–∞–ª—É–≥–∞", "–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–°–∞–º–∞—Ä–∞", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å", "–ö–∞–∑–∞–Ω—å", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ò–≤–∞–Ω–æ–≤–æ", "–†—è–∑–∞–Ω—å", "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫", "–ë–∞—Ç–∞–π—Å–∫", "–°–ª–∞–≤–∏–Ω—Å–∫-–Ω–∞-–ö—É–±–∞–Ω–∏", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–î–∞–≥–µ—Å—Ç–∞–Ω", "–ß–µ—á–Ω—è", "–í–æ—Ä–æ–Ω–µ–∂", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–°–∞—Ä–∞—Ç–æ–≤", "–ë—Ä—è–Ω—Å–∫", "–¢–∞–º–±–æ–≤", "–í–ª–∞–¥–∏–º–∏—Ä", "–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª", "–î–ù–†", "–õ–ù–†", "–ü–µ—Ä–º—å", "–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã"];
  const map = {};
  list.forEach((r, i) => map[`REG_${i}`] = r);
  return map;
})();

// üëá –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –ª–∏–¥–∞
function handleReturnLeadCommand(userId, chatId, messageText) {
  const props = PropertiesService.getScriptProperties();
  const leadId = parseInt(messageText.trim().match(/\d+/)?.[0]);
  const awaitingLeadId = props.getProperty('awaiting_return_reason_' + userId);
  
  if (awaitingLeadId) {
  props.deleteProperty('awaiting_return_reason_' + userId);

  const reason = userText.trim();
  const leadId = parseInt(awaitingLeadId);

  if (!MANAGERS_ALLOWED_TO_RETURN.includes(userId)) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –ª–∏–¥–æ–≤.');
    return;
  }

  const success = returnLeadToCallCenter(leadId, userId, reason);
  if (success) {
    sendMessage(chatId, `üîÅ –õ–∏–¥ #${leadId} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä.`);
  } else {
    sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –ª–∏–¥ #${leadId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞.`);
  }
  showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
  return;
}

  if (!leadId) {
    sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: 167037');
    return;
  }

  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_ASSIGN);
  const data = sheet.getDataRange().getValues();
  let foundRow = -1;

  for (let i = 1; i < data.length; i++) {
    const cell = data[i][0];
    const leadUrl = String(data[i][7] || ''); // –∫–æ–ª–æ–Ω–∫–∞ H: "–°—Å—ã–ª–∫–∞ –õ–∏–¥–∞"
    if (leadUrl.includes(`/${leadId}/`)) {
      foundRow = i;
      break;
    }
  }
  
  if (foundRow === -1) {
    logError(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏–¥ #${leadId} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞`, userId);
    sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏–¥ #${leadId} –≤ –ª–∏—Å—Ç–µ "${SHEET_ASSIGN}".`);
    return;
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
  sheet.deleteRow(foundRow + 1);
  sendMessage(chatId, `üîÅ –õ–∏–¥ #${leadId} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä.`);
}



function logError(message, userId) {
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_ERRORS);
  const now = new Date();
  sheet.appendRow([
    Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd HH:mm:ss'),
    userId,
    ALLOWED_USERS[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
    message
  ]);
}
 
function doPost(e) {
  const data = JSON.parse(e.postData.contents);
  const props = PropertiesService.getScriptProperties();
  
  Logger.log('üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: ' + JSON.stringify(data));

  if (data.callback_query) {
  const userId = data.callback_query.from.id;
  const chatId = data.callback_query.message.chat.id;
  const action = data.callback_query.data;
  const callbackId = data.callback_query.id;

  answerCallbackQuery(callbackId);

  if (['ARCHIVE_AND_CLEAR', 'ARCHIVE_NO_CLEAR'].includes(action)) {
    handleArchiveCallback(action, chatId, userId);
    return;
  }
  if (action === 'ARCHIVE_CONFIRM_CLEAR') {
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å', callback_data: 'ARCHIVE_AND_CLEAR' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'ARCHIVE_CANCEL' }]
    ]
  };
  sendMessage(chatId, '‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è.\n–í—Å–µ —Ä–∞–±–æ—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã.', keyboard);
  return;
}

if (action === 'ARCHIVE_CANCEL') {
  sendMessage(chatId, '‚ùé –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  return;
}

  const statusMap = {
  STATUS_OFFICE: "–í –æ—Ñ–∏—Å–µ",
  STATUS_SITE: "–ù–∞ –æ–±—ä–µ–∫—Ç–µ",
  STATUS_CLIENT: "–£ –∫–ª–∏–µ–Ω—Ç–∞",
  STATUS_VACATION: "–û—Ç–ø—É—Å–∫ / –ë–æ–ª—å–Ω–∏—á–Ω—ã–π / –û—Ç–≥—É–ª"
};

if (action === 'ARCHIVE_ACCESS') {
    if (hasArchiveAccess(userId)) {
      handleArchiveConfirm(chatId);
    } else {
      sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
    return;
  }

  if (action === 'ARCHIVE_ACCESS') {
    sendMessage(chatId, '‚ùé –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    return;
  }

if (action === 'RETURN_STEP') {
  props.setProperty(RETURN_STEP_PROPERTY, 'true');
  sendMessage(chatId, 'üîÅ –í–≤–µ–¥–∏—Ç–µ ID –ª–∏–¥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä:\n–ü—Ä–∏–º–µ—Ä: 167047');
  return;
}

if (statusMap[action]) {
  const status = statusMap[action];
  props.setProperty('status_' + userId, status);
  updateManagerStatusInQueue(userId, status);

  if (status === "–í –æ—Ñ–∏—Å–µ") {
    const fullName = ALLOWED_USERS[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const now = new Date();
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    sheet.appendRow([
      Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd'),
      Utilities.formatDate(now, 'GMT+3', 'HH:mm:ss'),
      fullName, status, '', '', userId
    ]);
    props.deleteProperty('status_' + userId);
    sendMessage(chatId, '‚úÖ –°—Ç–∞—Ç—É—Å "–í –æ—Ñ–∏—Å–µ" –∑–∞–ø–∏—Å–∞–Ω.');
    showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
    return;
  }

  if (["–ù–∞ –æ–±—ä–µ–∫—Ç–µ", "–£ –∫–ª–∏–µ–Ω—Ç–∞"].includes(status)) {
    sendMessage(chatId, 'üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ (–≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å, –æ–±—ä–µ–∫—Ç):');
    props.setProperty('awaiting_location_' + userId, 'true');
    return;
  }

  if (status === "–û—Ç–ø—É—Å–∫ / –ë–æ–ª—å–Ω–∏—á–Ω—ã–π / –û—Ç–≥—É–ª") {
    sendMessage(chatId, 'üìã –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:');
    props.setProperty('awaiting_comment_only_' + userId, 'true');
    return;
  }
}


  if (action.startsWith('REG_PAGE_')) {
  const page = parseInt(action.replace('REG_PAGE_', ''), 10);
  showRegionKeyboard(chatId, page);
  return;
}

  if (action === 'CONFIRM_ARCHIVE') {
    if (userId in ARCHIVE_ACCESS) {
      handleArchiveConfirm(chatId);
    } else {
      sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
    return;
  }

  if (action === 'ARCHIVE_ACCESS') {
    sendMessage(chatId, '‚ùé –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    return;
  }

  if (action.startsWith('REG_')) {
  const region = REGION_MAP[action] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω';
  props.setProperty('assign_region', region);
  props.setProperty('assign_step', 'city');
  sendMessage(chatId, `‚úÖ –†–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω: <b>${region}</b>\nüèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ / –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:`);
  return;
}

   answerCallbackQuery(callbackId);
}

  if (data.message && data.message.text && data.message.from) {
    const userId = data.message.from.id;
    const userText = data.message.text.trim();
    const chatId = data.message.chat.id;
    const assignStep = props.getProperty('assign_step');
    Logger.log('üì© userText: ' + userText);


  if (handleReportRequest(chatId, userId, userText)) return;

  if (userText.startsWith('/start')) {
  Logger.log(`üÜî /start –æ—Ç ${userId} (${ALLOWED_USERS[userId] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'})`);

  if (userId in ALLOWED_USERS) {
    const name = ALLOWED_USERS[userId];
    const welcomeText =
      `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!\n\n` +
      `–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à —Ä–∞–±–æ—á–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏:\n` +
      `üìç –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å\nüì§ –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º\nüîÅ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –ª–∏–¥—ã –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä\nüóÇ –î–µ–ª–∞–π—Ç–µ –∞—Ä—Ö–∏–≤—ã –∏ –≤—ã–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`;

    sendMessage(chatId, welcomeText);
    showReplyKeyboard(chatId, userId in ALLOWED_USERS);
  } else {
    const contactId = 420111780; // üëà —Å—é–¥–∞ –≤–∞—à Telegram ID
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø', url: `https://t.me/${contactId}?start=access_request_${userId}` }]
      ]
    };

    sendMessage(chatId,
      `‚õî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n` +
      `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
      keyboard
    );
  }

  return;
}

  if (userText.toLowerCase().startsWith('/return')) {
  if (!MANAGERS_ALLOWED_TO_RETURN.includes(userId)) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –ª–∏–¥–æ–≤.');
    return;
  }
  const leadId = parseInt(userText.trim().match(/\d+/)?.[0]);
const success = returnLeadToCallCenter(leadId, userId, '–í–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /return');


if (success) {
  sendMessage(chatId, `üîÅ –õ–∏–¥ #${leadId} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä.`);
} else {
  sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –ª–∏–¥ #${leadId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞.`);
}
  return;
}

// –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç, –µ—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞!
const currentStep = props.getProperty('assign_step');
if (/^\d+$/.test(userText.trim()) && MANAGERS_ALLOWED_TO_RETURN.includes(userId) && !currentStep) {
  const leadId = parseInt(userText.trim());
  props.setProperty('awaiting_return_reason_' + userId, leadId);
  sendMessage(chatId, '‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ª–∏–¥–∞:');
  return;
}

if (props.getProperty('awaiting_return_reason_' + userId)) {
  const leadId = parseInt(props.getProperty('awaiting_return_reason_' + userId));
  props.deleteProperty('awaiting_return_reason_' + userId);

  const reason = userText;

  const success = returnLeadToCallCenter(leadId, userId, reason);
  if (success) {
    sendMessage(chatId, `üîÅ –õ–∏–¥ #${leadId} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∏—Å—Ö–æ–¥–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\nüìã –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  } else {
    sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –ª–∏–¥ #${leadId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞.`);
  }

  showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
  return;
}



    if (props.getProperty(RETURN_STEP_PROPERTY) === 'true') {
      const leadId = parseInt(userText.trim().match(/\d+/)?.[0]);
      props.deleteProperty(RETURN_STEP_PROPERTY);

      if (!MANAGERS_ALLOWED_TO_RETURN.includes(userId)) {
        sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –ª–∏–¥–æ–≤.');
        return;
      }

      const success = handleReturnLeadById(leadId, userId);
      if (!success) {
        sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏–¥ #${leadId} –≤ –ª–∏—Å—Ç–µ "–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞".`);
      }
      showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
      return;
    }


    // üëá –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è "–ù–∞ –æ–±—ä–µ–∫—Ç–µ / –£ –∫–ª–∏–µ–Ω—Ç–∞"
if (props.getProperty('awaiting_location_' + userId)) {
  const fullName = ALLOWED_USERS[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
  const status = props.getProperty('status_' + userId);
  const now = new Date();
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
  sheet.appendRow([
    Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd'),
    Utilities.formatDate(now, 'GMT+3', 'HH:mm:ss'),
    fullName, status, userText, '', userId
  ]);
  props.deleteProperty('status_' + userId);
  props.deleteProperty('awaiting_location_' + userId);
  sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å "${status}" –∑–∞–ø–∏—Å–∞–Ω.`);
  showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
  return;
}

// üëá –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–ø—É—Å–∫–∞
if (props.getProperty('awaiting_comment_only_' + userId)) {
  const fullName = ALLOWED_USERS[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
  const status = props.getProperty('status_' + userId);
  const now = new Date();
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
  sheet.appendRow([
    Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd'),
    Utilities.formatDate(now, 'GMT+3', 'HH:mm:ss'),
    fullName, status, '', userText, userId
  ]);
  props.deleteProperty('status_' + userId);
  props.deleteProperty('awaiting_comment_only_' + userId);
  sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å "${status}" –∑–∞–ø–∏—Å–∞–Ω.`);
  showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
  return;
}


    if (!(userId in ALLOWED_USERS)) {
      sendMessage(chatId, '‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
      return;
    }

    const status = props.getProperty('status_' + userId);
    const location = props.getProperty('location_' + userId);
    const awaitingComment = props.getProperty('awaiting_comment_' + userId);
    

    if (userText.includes('–£–∫–∞–∑–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å')) {
      showStatusButtons(chatId);
      return;
    }

    // üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
if (userText.includes('–ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É')) {
  if (userId in RESTRICTED_USERS) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.');
    return;
  }

  props.setProperty('assign_step', 'region');
  showRegionKeyboard(chatId);
  return;
}

// üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å –ª–∏–¥ –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä"
if (userText.includes('–í–µ—Ä–Ω—É—Ç—å –ª–∏–¥ –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä')) {
  if (!MANAGERS_ALLOWED_TO_RETURN.includes(userId)) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –ª–∏–¥–æ–≤.');
    return;
  }
  sendMessage(chatId, 'üîô –í–≤–µ–¥–∏—Ç–µ ID –ª–∏–¥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä.\n–ü—Ä–∏–º–µ—Ä: <code>/return 167037</code>');
  return;
}


    if (userText.includes('–ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å')) {
      const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
      const values = sheet.getDataRange().getValues();
      const rows = values.filter(row => row[6] === userId);
      const last = rows[rows.length - 1] || [];
      const stat = last[3] || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      const loc = last[4] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      const com = last[5] ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${last[5]}` : '';
      sendMessage(chatId, `‚ÑπÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: <b>${stat}</b>\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${loc}\n${com}`);
      return;
    }

    if (userText.includes('–ü–µ—Ä–µ–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞') || userText.toLowerCase().includes('/assign')) {
  if (userId in RESTRICTED_USERS) {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.');
    return;
  }
  props.setProperty('assign_step', 'region');
  showRegionKeyboard(chatId);
  return;
}

    if (userText === 'üóÇ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ' || userText.toLowerCase().includes('–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å')) {
    if (hasArchiveAccess(userId)) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üì¶ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å (—Å –æ—á–∏—Å—Ç–∫–æ–π)', callback_data: 'ARCHIVE_CONFIRM_CLEAR' },
          { text: 'üìã –¢–æ–ª—å–∫–æ –≤—ã–≥—Ä—É–∑–∫–∞ (–±–µ–∑ –æ—á–∏—Å—Ç–∫–∏)', callback_data: 'ARCHIVE_NO_CLEAR' }
        ]
      ]
    };
    sendMessage(chatId,
      '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–ï—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã –±—É–¥—É—Ç <b>–æ—á–∏—â–µ–Ω—ã</b> –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!\n' +
      '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>.\n\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:',
      keyboard
    );
  } else {
    sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
  return;
}

if (assignStep === 'city') {
  props.setProperty('assign_city', userText);
  props.setProperty('assign_step', 'type');

  const typeHelp = `
üèó –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –æ–±—ä–µ–∫—Ç–∞ (0, 1, 2, 3, 4):

<b>0</b> ‚Äî –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ö–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ª–∏—á–Ω–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑—Ü—ã.  
<b>1</b> ‚Äî –¥–æ–º 1 —ç—Ç–∞–∂ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ 100‚ÄØ000 ‚ÇΩ  
<b>2</b> ‚Äî –¥–æ–º 2 —ç—Ç–∞–∂–∞ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ 200‚ÄØ000 ‚ÇΩ  
<b>3</b> ‚Äî –¥–æ–º 3 —ç—Ç–∞–∂–∞ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–≤—ã—à–µ 200‚ÄØ000 ‚ÇΩ  
<b>4</b> ‚Äî –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, –æ—Ç–µ–ª—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–ª–∏ –≤—ã—Å–æ—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ.`;

  sendMessage(chatId, typeHelp);
  return;
}


if (assignStep === 'type') {
  const validTypes = ['0', '1', '2', '3', '4'];
  if (!validTypes.includes(userText)) {
    sendMessage(chatId, '‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 4.\n–ü—Ä–∏–º–µ—Ä: 2');
    return;
  }

  const typeDescriptions = {
    '0': '–í–∏–¥ 0 ‚Äî –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ö–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ª–∏—á–Ω–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑—Ü—ã. –ù–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ–±—ä—ë–º–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–º–∞.',
    '1': '–í–∏–¥ 1 ‚Äî –¥–æ–º 1 —ç—Ç–∞–∂ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ 100‚ÄØ000 ‚ÇΩ.',
    '2': '–í–∏–¥ 2 ‚Äî –¥–æ–º 2 —ç—Ç–∞–∂–∞ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ 200‚ÄØ000 ‚ÇΩ.',
    '3': '–í–∏–¥ 3 ‚Äî –¥–æ–º 3 —ç—Ç–∞–∂–∞ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–≤—ã—à–µ 200‚ÄØ000 ‚ÇΩ.',
    '4': '–í–∏–¥ 4 ‚Äî –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, –æ—Ç–µ–ª—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–ª–∏ –≤—ã—Å–æ—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ.'
  };

  props.setProperty('assign_type', userText);
  props.setProperty('assign_step', 'lead_id');
  sendMessage(chatId, `‚úÖ –í–∏–¥ –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>${userText}</b>\n${typeDescriptions[userText]}\n\nüî¢ –í–≤–µ–¥–∏—Ç–µ ID –ª–∏–¥–∞ –∏–∑ Bitrix24 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 167037):`);
  return;
}

// üëá –ù–æ–≤—ã–π —à–∞–≥ ‚Äî –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID –ª–∏–¥–∞
if (assignStep === 'lead_id') {
  const region = props.getProperty('assign_region');
  const city = props.getProperty('assign_city');
  const type = parseInt(props.getProperty('assign_type'), 10);
  const leadId = parseInt(userText.trim().match(/\d+/)?.[0]);

  const result = computeManager(region, type, getTodayISO());
  let managerName = result.manager;

  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_ASSIGN);
  const fullName = resolveManagerNameFromSheet(userId);
  if (fullName === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') {
  sendMessage(chatId, '‚õî –û—à–∏–±–∫–∞: –≤–∞—à Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ \"–ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\".');
  return;
}

    sheet.appendRow([
    getTodayISO(),
    region,
    city,
    type,
    fullName,
    '',        // ‚Üê –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ onEdit
    ''         // ‚Üê –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–∂–µ –ø—É—Å—Ç–æ–π, –ø—É—Å—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç computeManager –≤–Ω—É—Ç—Ä–∏ onEdit
  ]);


  // üëá –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ appendRow
const lastRow = sheet.getLastRow();
const typeCell = sheet.getRange(lastRow, 4); // –∫–æ–ª–æ–Ω–∫–∞ D = –í–∏–¥ –æ–±—ä–µ–∫—Ç–∞
onEdit({ range: typeCell }); // —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

 if (leadId) {
  Utilities.sleep(3000);

  // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const updatedManagerName = sheet.getRange(lastRow, 6).getValue().trim();
  if (!updatedManagerName) {
    Logger.log(`‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ onEdit`);
    sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.`);
    return;
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ Bitrix
  autoAssignManagerToBitrix(leadId, updatedManagerName);

  // –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–¥–µ–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è
  Utilities.sleep(5000);

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
  const assignSheet = SpreadsheetApp.getActive().getSheetByName(SHEET_ASSIGN);
  const assignData = assignSheet.getDataRange().getValues();
  let leadLink = '', dealLink = '', assignerName = '';

  for (let i = assignData.length - 1; i >= 1; i--) {
    if (String(assignData[i][7]).includes(`/${leadId}/`)) {
      leadLink = assignData[i][7];
      dealLink = assignData[i][8];
      assignerName = assignData[i][4];
      const comment = assignData[i][6]; // –∫–æ–ª–æ–Ω–∫–∞ G ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

if (comment.includes('–ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é')) {
  Logger.log(`üì§ –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
  notifyAssignedManagerByGeo(leadId, city, region, updatedManagerName);
} else {
  Logger.log(`‚ÑπÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–µ –ø–æ –≥–µ–æ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è`);
}
      break;
    }
  }

  if (!leadLink || !dealLink) {
    logErrorIfNeeded(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–∏–¥/—Å–¥–µ–ª–∫—É`, `–õ–∏–¥ #${leadId}`);
  }

  // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç
  sendMessage(chatId, `‚úÖ –õ–∏–¥ #${leadId} –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É <b>${updatedManagerName}</b> –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ Bitrix.`);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –∏–∑ Bitrix
  const leadInfo = fetchLeadInfo(leadId);

  if (!leadInfo) {
    logErrorIfNeeded(`‚ö†Ô∏è –õ–∏–¥ #${leadId} –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Bitrix`);
    return;
  }

}

  props.deleteAllProperties();
  showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);
  return;
}
    if (status && !location) {
      props.setProperty('location_' + userId, userText);
      props.setProperty('awaiting_comment_' + userId, 'true');
      sendMessage(chatId, '‚úè –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\n–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"');
      return;
    }

    if (status && location && awaitingComment === 'true') {
      const fullName = ALLOWED_USERS[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
      const comment = userText === '-' ? '' : userText;
      const now = new Date();
      const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
      sheet.appendRow([
        Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd'),
        Utilities.formatDate(now, 'GMT+3', 'HH:mm:ss'),
        fullName, status, location, comment, userId
      ]);

      props.deleteProperty('status_' + userId);
      props.deleteProperty('location_' + userId);
      props.deleteProperty('awaiting_comment_' + userId);

      sendMessage(chatId, '‚úÖ –°–ø–∞—Å–∏–±–æ! –°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω—ã.');
      showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);;
      return;
    }

    if (!status && !assignStep) {
      sendMessage(chatId, '‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É.');
      showReplyKeyboard(chatId, userId in ALLOWED_ADMINS);;
    }
  }
}
function showReplyKeyboard(chatId, isAdmin = false) {
  const keyboard = [
    [{ text: "üìç –£–∫–∞–∑–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å" }],
    [{ text: "‚ÑπÔ∏è –ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å" }]
  ];

  if (!(chatId in RESTRICTED_USERS)) {
    keyboard.push([{ text: "üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É" }]);
  }

  if (MANAGERS_ALLOWED_TO_RETURN.includes(chatId)) {
    keyboard.push([{ text: "üîÅ –í–µ—Ä–Ω—É—Ç—å –ª–∏–¥ –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä" }]);
  }

  if (isAdmin || chatId in ARCHIVE_ACCESS) {
  keyboard.push([{ text: "üóÇ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" }]);
}

if (hasArchiveAccess(chatId)) {
  keyboard.push([{ text: "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞" }]);
}

  sendMessage(chatId, 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    keyboard: keyboard,
    resize_keyboard: true,
    one_time_keyboard: false
  });
}


function showStatusButtons(chatId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: "üü¢ –í –æ—Ñ–∏—Å–µ", callback_data: "STATUS_OFFICE" }],
      [{ text: "üîµ –ù–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data: "STATUS_SITE" }],
      [{ text: "‚ö™ –£ –∫–ª–∏–µ–Ω—Ç–∞", callback_data: "STATUS_CLIENT" }],
      [{ text: "üî¥ –û—Ç–ø—É—Å–∫ / –ë–æ–ª—å–Ω–∏—á–Ω—ã–π / –û—Ç–≥—É–ª", callback_data: "STATUS_VACATION" }]
    ]
  };
  sendMessage(chatId, 'üëã –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:', keyboard);
}

function showRegionKeyboard(chatId, page = 0) {
  const keys = Object.keys(REGION_MAP);
  const pageSize = 16; // 16 –∫–Ω–æ–ø–æ–∫ = 8 —Å—Ç—Ä–æ–∫ –ø–æ 2 –≤ —Ä—è–¥

  const start = page * pageSize;
  const end = start + pageSize;
  const inlineKeyboard = [];

  for (let i = start; i < Math.min(end, keys.length); i += 2) {
    inlineKeyboard.push([
      { text: REGION_MAP[keys[i]], callback_data: keys[i] },
      keys[i + 1] ? { text: REGION_MAP[keys[i + 1]], callback_data: keys[i + 1] } : null
    ].filter(Boolean));
  }

  // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Ä–µ–≥–∏–æ–Ω—ã
  if (end < keys.length) {
    inlineKeyboard.push([{ text: 'üìÑ –î–∞–ª–µ–µ', callback_data: `REG_PAGE_${page + 1}` }]);
  }

  sendMessage(chatId, 'üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:', { inline_keyboard: inlineKeyboard });
}

function resolveManagerNameFromSheet(telegramId) {
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('–ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏');
  const data = sheet.getDataRange().getValues();

  const inputId = String(telegramId).trim();
  Logger.log('üîç –ò—â–µ–º Telegram ID: ' + inputId);

  for (let i = 1; i < data.length; i++) {
    const rowId = String(data[i][1]).trim();
    Logger.log(`‚û°Ô∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: rowId = "${rowId}", inputId = "${inputId}"`);
    if (rowId === inputId) {
      Logger.log('‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ' + data[i][2]);
      return data[i][2];
    }
  }

  Logger.log('‚õî –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è ID: ' + inputId);
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
}

function sendMessage(chatId, text, keyboard = null) {
  const url = 'https://api.telegram.org/bot' + BOT_TOKEN + '/sendMessage';
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  if (keyboard) payload.reply_markup = JSON.stringify(keyboard);
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  };
  UrlFetchApp.fetch(url, options);
}

function answerCallbackQuery(callbackId) {
  const url = 'https://api.telegram.org/bot' + BOT_TOKEN + '/answerCallbackQuery';
  const payload = { callback_query_id: callbackId };
  UrlFetchApp.fetch(url, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  });
}


function updateManagerStatusInQueue(userId, status) {
  const name = (ALLOWED_USERS[userId] || '').trim();
  if (!name) {
    Logger.log(`‚õî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –¥–ª—è userId: ${userId}`);
    return;
  }

  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = ss.getSheetByName("–û—á–µ—Ä–µ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤");
  const data = sheet.getDataRange().getValues();

  let found = false;
  for (let i = 1; i < data.length; i++) {
    const rowName = (data[i][1] || '').toString().trim(); // –∫–æ–ª–æ–Ω–∫–∞ B
    if (rowName === name) {
      const newStatus = (status === "–í –æ—Ñ–∏—Å–µ") ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω";
      sheet.getRange(i + 1, 5).setValue(newStatus); // –∫–æ–ª–æ–Ω–∫–∞ E
      Logger.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è ${name}: ${newStatus}`);
      found = true;
      break;
    }
  }

  if (!found) {
    Logger.log(`‚ö†Ô∏è –ò–º—è "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ B –ª–∏—Å—Ç–∞ "–û—á–µ—Ä–µ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"`);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  if (status !== "–í –æ—Ñ–∏—Å–µ") {
    sendMessage(userId, '‚ö†Ô∏è –ü–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å–µ, –ª–∏–¥—ã –≤–∞–º –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è.\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –ª–∏–¥—ã ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å "–í –æ—Ñ–∏—Å–µ".');
  }
}
function logErrorIfNeeded(message, context = '') {
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_ERRORS || '–õ–æ–≥–û—à–∏–±–æ–∫');
  const now = new Date();
  sheet.appendRow([
    Utilities.formatDate(now, 'GMT+3', 'yyyy-MM-dd HH:mm:ss'),
    '-', '-',  // userId –∏ name –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã —Ç—É—Ç
    `${message}${context ? ' ‚Äî ' + context : ''}`
  ]);
}

function notifyAssignedManagerByGeo(leadId, city, region, updatedManagerName) {
  const sheet = SpreadsheetApp.getActive().getSheetByName('–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—á–∞');
  const data = sheet.getDataRange().getValues();

  let leadLink = '', dealLink = '', managerName = '', ccName = '', comment = '';

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    if (String(row[7]).includes(`/${leadId}/`)) {
      managerName = row[5];     // –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä
      ccName = row[4];          // –ú–µ–Ω–µ–¥–∂–µ—Ä –ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä
      comment = String(row[6]); // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      leadLink = row[7];        // –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥
      dealLink = row[8];        // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
      break;
    }
  }

  if (!comment.toLowerCase().includes('–ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é')) {
    Logger.log(`‚ÑπÔ∏è –õ–∏–¥ #${leadId} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–µ –ø–æ –≥–µ–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.`);
    return;
  }

  logErrorIfNeeded(`üöÄ –í—ã–∑–≤–∞–Ω notifyAssignedManagerByGeo`, `–õ–∏–¥ #${leadId}`);

  const leadInfo = fetchLeadInfo(leadId);
  if (!leadInfo) {
    logErrorIfNeeded(`‚ö†Ô∏è –õ–∏–¥ #${leadId} –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Bitrix`);
    return;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const queueSheet = SpreadsheetApp.getActive().getSheetByName("–û—á–µ—Ä–µ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤");
  const ccSheet = SpreadsheetApp.getActive().getSheetByName("–ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏");
  const queueRows = queueSheet.getDataRange().getValues().slice(1);
  const ccRows = ccSheet.getDataRange().getValues().slice(1);
  const managerRow = queueRows.find(r => isNameMatch(r[1], updatedManagerName));
  const managerTelegramId = managerRow ? managerRow[5] : null;  // F = Telegram ID
  const ccRow = ccRows.find(r => isNameMatch(r[2], ccName));
  const ccTelegramId = ccRow ? ccRow[1] : null; // 1 = Telegram ID


if (managerTelegramId) {
  logErrorIfNeeded(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)`, `${updatedManagerName}, ID: ${managerTelegramId}`);
  
  sendMessage(managerTelegramId,
    `üìç <b>–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!</b>\n\n` +
    `üë§ –ö–ª–∏–µ–Ω—Ç: <b>${leadInfo.name}</b>\nüìû ${leadInfo.phone}\n` +
    `üìç –ì–æ—Ä–æ–¥: <b>${city || region}</b>\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${leadInfo.comment || '‚Äî'}\n\n` +
    `üîó <a href="${leadLink}">–û—Ç–∫—Ä—ã—Ç—å –ª–∏–¥</a>\n<a href="${dealLink}">–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É</a>`);
} else {
  logErrorIfNeeded(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)`, updatedManagerName);
}

  if (ccTelegramId) {
    sendMessage(ccTelegramId,
      `üìã <b>–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b>\n` +
      `üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: <b>${managerName}</b>\nüìç –ì–æ—Ä–æ–¥: <b>${city || region}</b>\n` +
      `üîó <a href="${leadLink}">–õ–∏–¥</a> / <a href="${dealLink}">–°–¥–µ–ª–∫–∞</a>\n\n` +
      `üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`);
  } else {
    logErrorIfNeeded(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Telegram ID –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞`, ccName);
  }
}

// –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –º—è–≥–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è isNameMatch –∏–º–µ–Ω
function isNameMatch(nameA, nameB) {
  const normalize = (s) => String(s || '')
    .toLowerCase()
    .replace(/[^–∞-—èa-z—ë\s]/gi, '')
    .replace(/\s+/g, ' ')
    .trim();

  const partsA = normalize(nameA).split(' ');
  const partsB = normalize(nameB).split(' ');

  if (partsA.length === 0 || partsB.length === 0) return false;

  // üîπ –§–∞–º–∏–ª–∏—è ‚Äî –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
  const surnameA = partsA[0];
  const surnameB = partsB[0];

  // üî∏ –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Å—Ä–∞–∑—É false
  if (surnameA !== surnameB) return false;

  // ‚úÖ –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è/–∏–Ω–∏—Ü–∏–∞–ª—ã (–≥–∏–±–∫–æ)
  const namePartA = partsA.slice(1).join(' ');
  const namePartB = partsB.slice(1).join(' ');

  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ ‚Äî —Ñ–∞–º–∏–ª–∏—è —É–∂–µ —Å–æ–≤–ø–∞–ª–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
  if (!namePartA || !namePartB) return true;

  // –ú—è–≥–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
  return namePartA.startsWith(namePartB) || namePartB.startsWith(namePartA);
}



